[{"name": "app.py", "content": "from shiny import reactive, render\nfrom shiny.express import ui, input\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\n\nUPDATE_INTERVAL_SECS = 3\nDEQUE_SIZE = 5\ndata_store = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n@reactive.calc()\ndef live_data():\n    if input.update_on():\n        reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    use_fahrenheit = input.use_fahrenheit()\n    temp_c = round(random.uniform(-10, 10), 1)\n    temp = round(temp_c * 9 / 5 + 32, 1) if use_fahrenheit else temp_c\n    unit = \"F\" if use_fahrenheit else \"C\"\n    timestamp = datetime.now().strftime(\"%H:%M:%S\")\n    new_row = {\"temp\": temp, \"timestamp\": timestamp, \"unit\": unit}\n\n    if input.update_on():\n        data_store.get().append(new_row)\n\n    df = pd.DataFrame(data_store.get())\n    return data_store.get(), df, new_row\n\nui.page_opts(title=\"\ud83c\udf21\ufe0f Sabri Temp Tracker\", fillable=True)\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"\ud83d\udd25 Temp Monitor\")\n    ui.p(\"Track simulated temperature every 3 seconds.\")\n    ui.input_checkbox(\"use_fahrenheit\", \"Use Fahrenheit (\u00b0F)\", False)\n    ui.input_switch(\"update_on\", \"Live Updates\", True)\n    ui.hr()\n    ui.h6(\"Resources:\")\n    ui.a(\"\ud83d\udcc1 GitHub Repo\", href=\"https://github.com/sabrouch36/cintel-05-cintel\", target=\"_blank\")\n\nwith ui.layout_columns():\n    with ui.value_box(showcase=icon_svg(\"temperature-high\"), theme=\"bg-gradient-orange-red\"):\n        ui.h4(\"Current Temp\")\n\n        @render.text\n        def show_temp():\n            _, _, row = live_data()\n            return f\"{row['temp']} \u00b0{row['unit']}\"\n\n    with ui.card():\n        ui.card_header(\"Current Time\")\n\n        @render.text\n        def show_time():\n            _, _, row = live_data()\n            return row[\"timestamp\"]\n\nwith ui.card():\n    ui.card_header(\"Recent Readings\")\n\n    @render.data_frame\n    def show_table():\n        _, df, _ = live_data()\n        return render.DataGrid(df)\n\nwith ui.card():\n    ui.card_header(\"Temperature Chart + Trend\")\n\n    @render_plotly\n    def show_plot():\n        _, df, row = live_data()\n        if not df.empty:\n            unit = row[\"unit\"]\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n            fig = px.scatter(\n                df,\n                x=\"timestamp\",\n                y=\"temp\",\n                title=f\"Temp ({unit}) with Trend Line\",\n                labels={\"temp\": f\"Temp (\u00b0{unit})\"},\n                color_discrete_sequence=[\"blue\"]\n            )\n            x = list(range(len(df)))\n            slope, intercept, *_ = stats.linregress(x, df[\"temp\"])\n            df[\"trend\"] = [slope * i + intercept for i in x]\n            fig.add_scatter(\n                x=df[\"timestamp\"],\n                y=df[\"trend\"],\n                mode=\"lines\",\n                name=\"Trend\",\n                line=dict(color=\"red\")\n            )\n            fig.update_layout(xaxis_title=\"Time\", yaxis_title=f\"Temp (\u00b0{unit})\")\n            return fig\n        return px.scatter()\n", "type": "text"}]