[{"name": "app.py", "content": "from shiny import reactive, render\nfrom shiny.express import ui, input\nimport requests\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\n\n# \nUPDATE_INTERVAL_SECS = 3\nDEQUE_SIZE = 5\ndata_store = reactive.value(deque(maxlen=DEQUE_SIZE))\n\nui.page_opts(title=\"\ud83c\udf0d Live Temperature Tracker\", fillable=True)\nui.tags.style(\n    \"\"\"\n    body {\n        background: linear-gradient(to bottom, #1e1e2f, #2b2b3a);\n        color: #e0e0e0;\n        font-family: 'Segoe UI', sans-serif;\n    }\n    .value-box, .card {\n        border-radius: 16px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n    }\n    \"\"\"\n)\n\ndef get_temperature_from_openweather(city: str, use_fahrenheit: bool) -> tuple[float, str]:\n    API_KEY = \"4be0c6794a5ee4171b890c1732a8a881\"\n    units = \"imperial\" if use_fahrenheit else \"metric\"\n    url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units={units}\"\n\n    try:\n        response = requests.get(url, timeout=5)\n        data = response.json()\n        temp = data[\"main\"][\"temp\"]\n        unit = \"F\" if use_fahrenheit else \"C\"\n        return round(temp, 1), unit\n    except Exception as e:\n        print(\"Weather API error:\", e)\n        return 0.0, \"?\"\n\n@reactive.calc()\ndef live_data():\n    if input.update_on():\n        reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    city = \"Philadelphia\"\n    use_fahrenheit = input.use_fahrenheit()\n    temp, unit = get_temperature_from_openweather(city, use_fahrenheit)\n    timestamp = datetime.now().strftime(\"%H:%M:%S\")\n    new_row = {\"temp\": temp, \"timestamp\": timestamp, \"unit\": unit}\n\n    if input.update_on():\n        data_store.get().append(new_row)\n\n    df = pd.DataFrame(data_store.get())\n    return data_store.get(), df, new_row\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"\ud83d\udd25 Temp Monitor\")\n    ui.p(\"Track live temperature for Philadelphia with 3s updates.\")\n    ui.input_checkbox(\"use_fahrenheit\", \"Use Fahrenheit (\u00b0F)\", False)\n    ui.input_switch(\"update_on\", \"Live Updates\", True)\n\n    ui.hr()\n    ui.h6(\"Resources:\")\n    ui.a(\"\ud83d\udcc1 GitHub Repo\", href=\"https://github.com/sabrouch36/cintel-05-cintel\", target=\"_blank\")\n    ui.a(\"\ud83d\udcc4 View app.py\", href=\"https://github.com/sabrouch36/cintel-05-cintel/blob/main/app.py\", target=\"_blank\")\n    ui.a(\"\ud83e\uddea Try PyShiny Playground\", href=\"https://shinylive.io/py/\", target=\"_blank\")\n    ui.a(\"\ud83d\udcda PyShiny Express Docs\", href=\"https://shiny.posit.co/blog/posts/shiny-express/\", target=\"_blank\")\n    ui.a(\"\ud83d\udcd6 Python Standard Library\", href=\"https://docs.python.org/3/library/index.html\", target=\"_blank\")\n\nwith ui.layout_columns():\n    with ui.value_box(showcase=icon_svg(\"temperature-high\"), theme=\"bg-gradient-teal\"):\n        ui.h4(\"Current Temp\")\n\n        @render.text\n        def show_temp():\n            _, _, row = live_data()\n            return f\"{row['temp']} \u00b0{row['unit']}\"\n\n    with ui.card():\n        ui.card_header(\"Current Time\")\n\n        @render.text\n        def show_time():\n            _, _, row = live_data()\n            return row[\"timestamp\"]\n\nwith ui.card():\n    ui.card_header(\"Recent Readings\")\n\n    @render.data_frame\n    def show_table():\n        _, df, _ = live_data()\n        return render.DataGrid(df)\n\nwith ui.card():\n    ui.card_header(\"Temperature Chart + Trend\")\n\n    @render_plotly\n    def show_plot():\n        _, df, row = live_data()\n        if not df.empty:\n            unit = row[\"unit\"]\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n            fig = px.scatter(\n                df,\n                x=\"timestamp\",\n                y=\"temp\",\n                title=f\"Temp ({unit}) with Trend Line\",\n                labels={\"temp\": f\"Temp (\u00b0{unit})\"},\n                color_discrete_sequence=[\"lightgreen\"]\n            )\n            x = list(range(len(df)))\n            slope, intercept, *_ = stats.linregress(x, df[\"temp\"])\n            df[\"trend\"] = [slope * i + intercept for i in x]\n            fig.add_scatter(\n                x=df[\"timestamp\"],\n                y=df[\"trend\"],\n                mode=\"lines\",\n                name=\"Trend\",\n                line=dict(color=\"cyan\")\n            )\n            fig.update_layout(xaxis_title=\"Time\", yaxis_title=f\"Temp (\u00b0{unit})\")\n            return fig\n        return px.scatter()\n", "type": "text"}, {"name": "README.md", "content": "# cintel-05-cintel", "type": "text"}, {"name": "requirements.txt", "content": "//5hAG4AeQBpAG8APQA9ADQALgA5AC4AMAANAAoAYQBwAHAAZABpAHIAcwA9AD0AMQAuADQALgA0AA0ACgBhAHMAZwBpAHIAZQBmAD0APQAzAC4AOAAuADEADQAKAGMAZQByAHQAaQBmAGkAPQA9ADIAMAAyADUALgA0AC4AMgA2AA0ACgBjAGgAYQByAHMAZQB0AC0AbgBvAHIAbQBhAGwAaQB6AGUAcgA9AD0AMwAuADQALgAyAA0ACgBjAGgAZQB2AHIAbwBuAD0APQAwAC4AMQA0AC4AMAANAAoAYwBsAGkAYwBrAD0APQA4AC4AMgAuADEADQAKAGMAbwBsAG8AcgBhAG0AYQA9AD0AMAAuADQALgA2AA0ACgBjAG8AbgB0AG8AdQByAHAAeQA9AD0AMQAuADMALgAyAA0ACgBjAHkAYwBsAGUAcgA9AD0AMAAuADEAMgAuADEADQAKAGUAdABfAHgAbQBsAGYAaQBsAGUAPQA9ADIALgAwAC4AMAANAAoARgBhAGsAZQByAD0APQAzADcALgA0AC4AMAANAAoAZgBvAG4AdAB0AG8AbwBsAHMAPQA9ADQALgA1ADgALgAwAA0ACgBmAHUAdAB1AHIAZQA9AD0AMQAuADAALgAwAA0ACgBoADEAMQA9AD0AMAAuADEANgAuADAADQAKAGgAdABtAGwAdABvAG8AbABzAD0APQAwAC4ANgAuADAADQAKAGkAZABuAGEAPQA9ADMALgAxADAADQAKAGsAaQB3AGkAcwBvAGwAdgBlAHIAPQA9ADEALgA0AC4AOAANAAoAbABpAG4AawBpAGYAeQAtAGkAdAAtAHAAeQA9AD0AMgAuADAALgAzAA0ACgBsAG8AZwB1AHIAdQA9AD0AMAAuADcALgAzAA0ACgBsAHoAcwB0AHIAaQBuAGcAPQA9ADEALgAwAC4ANAANAAoAbQBhAHIAawBkAG8AdwBuAC0AaQB0AC0AcAB5AD0APQAzAC4AMAAuADAADQAKAG0AYQB0AHAAbABvAHQAbABpAGIAPQA9ADMALgAxADAALgAzAA0ACgBtAGQAaQB0AC0AcAB5AC0AcABsAHUAZwBpAG4AcwA9AD0AMAAuADQALgAyAA0ACgBtAGQAdQByAGwAPQA9ADAALgAxAC4AMgANAAoAbgBhAHIAdwBoAGEAbABzAD0APQAxAC4ANAA0AC4AMAANAAoAbgB1AG0AcAB5AD0APQAyAC4AMgAuADYADQAKAG8AcABlAG4AcAB5AHgAbAA9AD0AMwAuADEALgA1AA0ACgBvAHIAagBzAG8AbgA9AD0AMwAuADEAMAAuADEAOAANAAoAcABhAGMAawBhAGcAaQBuAGcAPQA9ADIANQAuADAADQAKAHAAYQBsAG0AZQByAHAAZQBuAGcAdQBpAG4AcwA9AD0AMAAuADEALgA0AA0ACgBwAGEAbgBkAGEAcwA9AD0AMgAuADIALgAzAA0ACgBwAGkAbABsAG8AdwA9AD0AMQAxAC4AMgAuADEADQAKAHAAbABvAHQAbAB5AD0APQA2AC4AMgAuADAADQAKAHAAbwBsAGEAcgBzAD0APQAxAC4AMwAxAC4AMAANAAoAcAByAG8AbQBwAHQAXwB0AG8AbwBsAGsAaQB0AD0APQAzAC4AMAAuADUAMQANAAoAcAB5AHAAYQByAHMAaQBuAGcAPQA9ADMALgAyAC4AMwANAAoAcAB5AHQAaABvAG4ALQBkAGEAdABlAHUAdABpAGwAPQA9ADIALgA5AC4AMAAuAHAAbwBzAHQAMAANAAoAcAB5AHQAaABvAG4ALQBtAHUAbAB0AGkAcABhAHIAdAA9AD0AMAAuADAALgAyADAADQAKAHAAeQB0AHoAPQA9ADIAMAAyADUALgAyAA0ACgBxAHUAZQBzAHQAaQBvAG4AYQByAHkAPQA9ADIALgAxAC4AMAANAAoAcgBlAHEAdQBlAHMAdABzAD0APQAyAC4AMwAyAC4AMwANAAoAcwBlAGEAYgBvAHIAbgA9AD0AMAAuADEAMwAuADIADQAKAHMAZQB0AHUAcAB0AG8AbwBsAHMAPQA9ADgAMAAuADkALgAwAA0ACgBzAGgAaQBuAHkAPQA9ADEALgA0AC4AMAANAAoAcwBoAGkAbgB5AGwAaQB2AGUAPQA9ADAALgA4AC4AMwANAAoAcwBpAHgAPQA9ADEALgAxADcALgAwAA0ACgBzAG4AaQBmAGYAaQBvAD0APQAxAC4AMwAuADEADQAKAHMAdABhAHIAbABlAHQAdABlAD0APQAwAC4ANAA3AC4AMQANAAoAdAB5AHAAaQBuAGcAXwBlAHgAdABlAG4AcwBpAG8AbgBzAD0APQA0AC4AMQA0AC4AMAANAAoAdAB6AGQAYQB0AGEAPQA9ADIAMAAyADUALgAyAA0ACgB1AGMALQBtAGkAYwByAG8ALQBwAHkAPQA9ADEALgAwAC4AMwANAAoAdQByAGwAbABpAGIAMwA9AD0AMgAuADQALgAwAA0ACgB1AHYAaQBjAG8AcgBuAD0APQAwAC4AMwA1AC4AMAANAAoAdwBhAHQAYwBoAGYAaQBsAGUAcwA9AD0AMQAuADEALgAwAA0ACgB3AGMAdwBpAGQAdABoAD0APQAwAC4AMgAuADEAMwANAAoAdwBlAGIAcwBvAGMAawBlAHQAcwA9AD0AMQA1AC4AMAAuADEADQAKAHcAaQBuADMAMgBfAHMAZQB0AGMAdABpAG0AZQA9AD0AMQAuADIALgAwAA0ACgA=", "type": "binary"}]